{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "compat": {
      "name": "compat",
      "description": "Perform API compatibility check against latest version",
      "steps": [
        {
          "exec": "jsii-diff npm:$(node -p \"require('./package.json').name\") -k --ignore-file .compatignore || (echo \"\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n\" && exit 1)"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "jsii --silence-warnings=reserved-word"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "node .projenrc.js"
        }
      ]
    },
    "docgen": {
      "name": "docgen",
      "description": "Generate API.md from .jsii manifest",
      "steps": [
        {
          "exec": "jsii-docgen -o API.md"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools .projenrc.js"
        }
      ]
    },
    "integ:metaflow-service:assert": {
      "name": "integ:metaflow-service:assert",
      "description": "assert the snapshot of integration test 'metaflow-service'",
      "steps": [
        {
          "exec": "[ -d \"test/metaflow-service.integ.snapshot\" ] || (echo \"No snapshot available for integration test 'metaflow-service'. Run 'projen integ:metaflow-service:deploy' to capture.\" && exit 1)"
        },
        {
          "exec": "cdk8s synth --app \"ts-node -P tsconfig.dev.json test/metaflow-service.integ.ts\" -o test/.tmp/metaflow-service.integ/assert.cdk.out > /dev/null"
        },
        {
          "exec": "diff test/metaflow-service.integ.snapshot/ test/.tmp/metaflow-service.integ/assert.cdk.out/"
        }
      ]
    },
    "integ:metaflow-service:deploy": {
      "name": "integ:metaflow-service:deploy",
      "description": "deploy integration test 'metaflow-service' and capture snapshot",
      "steps": [
        {
          "exec": "rm -fr test/.tmp/metaflow-service.integ/deploy.cdk.out"
        },
        {
          "exec": "cdk8s synth --app \"ts-node -P tsconfig.dev.json test/metaflow-service.integ.ts\" -o test/.tmp/metaflow-service.integ/deploy.cdk.out"
        },
        {
          "exec": "kubectl apply -f test/.tmp/metaflow-service.integ/deploy.cdk.out"
        },
        {
          "exec": "rm -fr test/metaflow-service.integ.snapshot"
        },
        {
          "exec": "mv test/.tmp/metaflow-service.integ/deploy.cdk.out test/metaflow-service.integ.snapshot"
        }
      ]
    },
    "integ:metaflow-service:snapshot": {
      "name": "integ:metaflow-service:snapshot",
      "description": "update snapshot for integration test \"metaflow-service\"",
      "steps": [
        {
          "exec": "rm -fr test/metaflow-service.integ.snapshot"
        },
        {
          "exec": "cdk8s synth --app \"ts-node -P tsconfig.dev.json test/metaflow-service.integ.ts\" -o test/metaflow-service.integ.snapshot"
        }
      ]
    },
    "integ:snapshot-all": {
      "name": "integ:snapshot-all",
      "description": "update snapshot for all integration tests",
      "steps": [
        {
          "spawn": "integ:metaflow-service:snapshot"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "if [ ! -z ${CI} ]; then rsync -a . .repo --exclude .git --exclude node_modules && rm -rf dist && mv .repo dist; else npx projen package-all; fi"
        }
      ]
    },
    "package-all": {
      "name": "package-all",
      "description": "Packages artifacts for all target languages"
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "docgen"
        }
      ]
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "cd ./test && cdk8s import k8s --language typescript"
        },
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot"
        },
        {
          "spawn": "eslint"
        },
        {
          "spawn": "integ:metaflow-service:assert"
        }
      ]
    },
    "test:update": {
      "name": "test:update",
      "description": "Update jest snapshots",
      "steps": [
        {
          "exec": "jest --updateSnapshot"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "jsii -w --silence-warnings=reserved-word"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node -e \\\"console.log(process.env.PATH)\\\"\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
