---
# Source: metaflow/charts/metaflow-service/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-metaflow-service
  labels:
    helm.sh/chart: metaflow-service-0.2.0
    app.kubernetes.io/name: metaflow-service
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.4"
    app.kubernetes.io/managed-by: Helm
---
# Source: metaflow/charts/metaflow-ui/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-metaflow-ui
  labels:
    helm.sh/chart: metaflow-ui-0.1.0
    app.kubernetes.io/name: metaflow-ui
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.1.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: metaflow/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-14.4.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  namespace: default
type: Opaque
data:
  postgresql-postgres-password: "SDVCdUVLb0xCdQ=="
  postgresql-password: "bWV0YWZsb3c="
---
# Source: metaflow/charts/metaflow-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-metaflow-service
  labels:
    helm.sh/chart: metaflow-service-0.2.0
    app.kubernetes.io/name: metaflow-service
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.4"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: metadata
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: upgrades
      port: 8082
      protocol: TCP
      targetPort: 8082
  selector:
    app.kubernetes.io/name: metaflow-service
    app.kubernetes.io/instance: release-name
---
# Source: metaflow/charts/metaflow-ui/templates/backend_service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-metaflow-ui
  labels:
    helm.sh/chart: metaflow-ui-0.1.0
    app.kubernetes.io/name: metaflow-ui
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8083
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: metaflow-ui
    app.kubernetes.io/instance: release-name
---
# Source: metaflow/charts/metaflow-ui/templates/static_service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-metaflow-ui-static"
  labels:
    helm.sh/chart: metaflow-ui-0.1.0
    app.kubernetes.io/name: metaflow-ui-static
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: metaflow-ui-static
    app.kubernetes.io/instance: release-name
---
# Source: metaflow/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-14.4.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
---
# Source: metaflow/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-14.4.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    role: primary
---
# Source: metaflow/charts/metaflow-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-metaflow-service
  labels:
    helm.sh/chart: metaflow-service-0.2.0
    app.kubernetes.io/name: metaflow-service
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.4"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: metaflow-service
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: metaflow-service
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-metaflow-service
      securityContext:
        { }
      initContainers:
        - name: db-migrations
          image: "public.ecr.aws/outerbounds/metaflow_metadata_service:2.2.4"
          command:
            - "/opt/latest/bin/python3"
            - "/root/run_goose.py"
            - "--only-if-empty-db"
          env:
            - name: MF_METADATA_DB_NAME
              value: "metaflow"
            - name: MF_METADATA_DB_PORT
              value: "5432"
            - name: MF_METADATA_DB_PSWD
              value: "metaflow"
            - name: MF_METADATA_DB_USER
              value: "metaflow"
            - name: MF_METADATA_DB_HOST
              value: release-name-postgresql
      containers:
        - name: metaflow-service
          securityContext:
            { }
          image: "public.ecr.aws/outerbounds/metaflow_metadata_service:2.2.4"
          command: [ "/opt/latest/bin/python3", "-m", "services.metadata_service.server" ]
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ping
              port: http
          readinessProbe:
            httpGet:
              path: /ping
              port: http
          resources:
            { }
          env:
            - name: MF_METADATA_DB_NAME
              value: "metaflow"
            - name: MF_METADATA_DB_PORT
              value: "5432"
            - name: MF_METADATA_DB_PSWD
              value: "metaflow"
            - name: MF_METADATA_DB_USER
              value: "metaflow"
            - name: MF_METADATA_DB_HOST
              value: release-name-postgresql
---
# Source: metaflow/charts/metaflow-ui/templates/backend_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-metaflow-ui
  labels:
    helm.sh/chart: metaflow-ui-0.1.0
    app.kubernetes.io/name: metaflow-ui
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: metaflow-ui
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: metaflow-ui
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-metaflow-ui
      securityContext:
        { }
      containers:
        - name: metaflow-ui
          securityContext:
            { }
          image: "netflixoss/metaflow_metadata_service:2.1.0"
          command: [ "/opt/latest/bin/python3", "-m", "services.ui_backend_service.ui_server" ]
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8083
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /api/ping
              port: http
          readinessProbe:
            httpGet:
              path: /api/ping
              port: http
          env:
            - name: UI_ENABLED
              value: "1"
            - name: PATH_PREFIX
              value: "/api"
            - name: MF_DATASTORE_ROOT
              value: ""
            - name: METAFLOW_DATASTORE_SYSROOT_S3
              value: ""
            - name: LOGLEVEL
              value: "DEBUG"
            - name: METAFLOW_SERVICE_URL
              value: "http://localhost:8083/api/metadata"
            - name: METAFLOW_DEFAULT_DATASTORE
              value: "s3"
            - name: METAFLOW_DEFAULT_METADATA
              value: "service"
            - name: MF_METADATA_DB_NAME
              value: "metaflow"
            - name: MF_METADATA_DB_PORT
              value: "5432"
            - name: MF_METADATA_DB_PSWD
              value: "metaflow"
            - name: MF_METADATA_DB_USER
              value: "metaflow"
            - name: MF_METADATA_DB_HOST
              value: release-name-postgresql
          resources:
            { }
---
# Source: metaflow/charts/metaflow-ui/templates/static_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "release-name-metaflow-ui-static"
  labels:
    helm.sh/chart: metaflow-ui-0.1.0
    app.kubernetes.io/name: metaflow-ui-static
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: metaflow-ui-static
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: metaflow-ui-static
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-metaflow-ui
      securityContext:
        { }
      containers:
        - name: "metaflow-ui-static"
          securityContext:
            { }
          image: "public.ecr.aws/outerbounds/metaflow_ui:v1.0.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            { }
---
# Source: metaflow/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-14.4.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: default
spec:
  serviceName: release-name-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      role: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-14.4.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:
      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: release-name-postgresql
          image: docker.io/bitnami/postgresql:14.4.0-debian-11-r19
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: "metaflow"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "metaflow"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "metaflow" -d "dbname=metaflow" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "metaflow" -d "dbname=metaflow" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath:
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: metaflow/charts/metaflow-service/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-metaflow-service
  labels:
    helm.sh/chart: metaflow-service-0.2.0
    app.kubernetes.io/name: metaflow-service
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.4"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: "chart-example.local"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-metaflow-service
                port:
                  number: 8080
---
# Source: metaflow/charts/metaflow-ui/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-metaflow-ui
  labels:
    helm.sh/chart: metaflow-ui-0.1.0
    app.kubernetes.io/name: metaflow-ui
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: "localhost"
      http:
        paths:
          - path: "/api"
            pathType: Prefix
            backend:
              service:
                name: release-name-metaflow-ui
                port:
                  number: 8083
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: release-name-metaflow-ui-static
                port:
                  number: 3000
          - path: "/static"
            pathType: Prefix
            backend:
              service:
                name: release-name-metaflow-ui-static
                port:
                  number: 3000
---
# Source: metaflow/charts/metaflow-service/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-metaflow-service-test-connection"
  labels:
    helm.sh/chart: metaflow-service-0.2.0
    app.kubernetes.io/name: metaflow-service
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.2.4"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: [ 'wget' ]
      args: [ 'release-name-metaflow-service:8080' ]
  restartPolicy: Never
---
# Source: metaflow/charts/metaflow-ui/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-metaflow-ui-test-connection"
  labels:
    helm.sh/chart: metaflow-ui-0.1.0
    app.kubernetes.io/name: metaflow-ui
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: [ 'wget' ]
      args: [ 'release-name-metaflow-ui:8083' ]
  restartPolicy: Never
